version: '3.2'

services:
  api01: &api
    build: .
    environment:
      HTTP_PORT: 8080
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: blogdb
      DB_USER: postgres
      DB_PASSWORD: 220305
      REDIS_HOST: localhost
      POOL_SIZE: 125
    depends_on:
      - db
      - redis
    deploy:
      resources:
        limits:
          cpus: '0.15'
          memory: '0.4GB'
    network_mode: "host"

  api02:
    <<: *api
    environment:
      HTTP_PORT: 8080
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: blogdb
      DB_USER: postgres
      DB_PASSWORD: 220305
      REDIS_HOST: localhost
      POOL_SIZE: 125

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api01
      - api02
    network_mode: host
    deploy:
      resources:
        limits:
          cpus: '0.15'
          memory: '0.5GB'

  db:
    image: postgres
    hostname: db
    environment:
      DB_NAME: blogdb
      DB_USER: postgres
      DB_PASSWORD: 220305
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgresql.conf:/docker-entrypoint-initdb.d/postgresql.conf
    command: postgres -c config_file=/docker-entrypoint-initdb.d/postgresql.conf
    network_mode: host
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 5s
      timeout: 5s
      retries: 20
    deploy:
      resources:
        limits:
          cpus: '0.9'
          memory: '1.4GB'

  redis:
    image: redis
    hostname: redis
    network_mode: host
    command: redis-server --save "" --appendonly no --maxclients 20000
    deploy:
      resources:
        limits:
          cpus: '0.15'
          memory: '0.3GB'
